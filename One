Perfect! Since you're using ASP.NET Core Identity and PostgreSQL, Iâ€™ll show you the models and DTOs tailored for your LMS. The models will work with Entity Framework Core and integrate with Identity. Here's how you can structure them:


---

1. Identity Setup

First, extend IdentityUser to create your custom ApplicationUser:

using Microsoft.AspNetCore.Identity;

public class ApplicationUser : IdentityUser
{
    public string FullName { get; set; }

    // Navigation
    public ICollection<LeaveRequest> LeaveRequests { get; set; }
}


---

2. Role (optional custom class if needed)

If you want to add metadata to roles:

using Microsoft.AspNetCore.Identity;

public class ApplicationRole : IdentityRole
{
    public string Description { get; set; }
}


---

3. LeaveType Model

public class LeaveType
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int DefaultDays { get; set; }

    public ICollection<LeaveRequest> LeaveRequests { get; set; }
    public ICollection<LeaveBalance> LeaveBalances { get; set; }
}


---

4. LeaveRequest Model

public class LeaveRequest
{
    public int Id { get; set; }

    public string EmployeeId { get; set; }
    public ApplicationUser Employee { get; set; }

    public int LeaveTypeId { get; set; }
    public LeaveType LeaveType { get; set; }

    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public string Reason { get; set; }

    public LeaveStatus Status { get; set; } = LeaveStatus.Pending;

    public string ManagerId { get; set; }
    public ApplicationUser Manager { get; set; }

    public DateTime RequestedAt { get; set; } = DateTime.UtcNow;
    public DateTime? ActionedAt { get; set; }
}

public enum LeaveStatus
{
    Pending,
    Approved,
    Rejected,
    Cancelled
}


---

5. LeaveBalance Model

public class LeaveBalance
{
    public int Id { get; set; }

    public string UserId { get; set; }
    public ApplicationUser User { get; set; }

    public int LeaveTypeId { get; set; }
    public LeaveType LeaveType { get; set; }

    public int Balance { get; set; }
}


---

DTOs (Data Transfer Objects)

These are for your API or UI layers, decoupled from EF Core models:

LeaveRequestDTO

public class LeaveRequestDto
{
    public int Id { get; set; }
    public string EmployeeName { get; set; }
    public string LeaveTypeName { get; set; }

    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public string Reason { get; set; }

    public string Status { get; set; }
}


---

CreateLeaveRequestDTO

public class CreateLeaveRequestDto
{
    public int LeaveTypeId { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public string Reason { get; set; }
}


---

LeaveBalanceDTO

public class LeaveBalanceDto
{
    public string LeaveTypeName { get; set; }
    public int Balance { get; set; }
}


---

UserDTO (for listing users with roles)

public class UserDto
{
    public string Id { get; set; }
    public string FullName { get; set; }
    public string Email { get; set; }
    public IList<string> Roles { get; set; }
}


---

Would you like:

A sample DbContext setup?

AutoMapper profile for DTOs?

Fluent validation or business logic example?


Let me know how deep you want to go.
