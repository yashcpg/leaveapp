Sure! Here's a complete ApplicationDbContext that integrates:

ASP.NET Core Identity

Your custom models: LeaveRequest, LeaveType, LeaveBalance

Fluent configuration if needed later via OnModelCreating



---

ApplicationDbContext.cs

using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

public class ApplicationDbContext : IdentityDbContext<ApplicationUser, ApplicationRole, string>
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    // DbSets
    public DbSet<LeaveType> LeaveTypes { get; set; }
    public DbSet<LeaveRequest> LeaveRequests { get; set; }
    public DbSet<LeaveBalance> LeaveBalances { get; set; }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        base.OnModelCreating(builder);

        // Relationships
        builder.Entity<LeaveRequest>()
            .HasOne(lr => lr.Employee)
            .WithMany(u => u.LeaveRequests)
            .HasForeignKey(lr => lr.EmployeeId)
            .OnDelete(DeleteBehavior.Restrict);

        builder.Entity<LeaveRequest>()
            .HasOne(lr => lr.Manager)
            .WithMany()
            .HasForeignKey(lr => lr.ManagerId)
            .OnDelete(DeleteBehavior.Restrict);

        builder.Entity<LeaveBalance>()
            .HasIndex(lb => new { lb.UserId, lb.LeaveTypeId })
            .IsUnique();

        // Seed Leave Types (optional)
        builder.Entity<LeaveType>().HasData(
            new LeaveType { Id = 1, Name = "Sick Leave", DefaultDays = 10 },
            new LeaveType { Id = 2, Name = "Casual Leave", DefaultDays = 8 },
            new LeaveType { Id = 3, Name = "Paid Leave", DefaultDays = 15 },
            new LeaveType { Id = 4, Name = "Unpaid Leave", DefaultDays = 0 }
        );
    }
}


---

Registration in Startup.cs or Program.cs

In Program.cs (minimal hosting model):

builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddIdentity<ApplicationUser, ApplicationRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>()
    .AddDefaultTokenProviders();

Make sure your appsettings.json has the connection string:

"ConnectionStrings": {
  "DefaultConnection": "Host=localhost;Port=5432;Database=LMS;Username=postgres;Password=yourpassword"
}


---

Let me know if you want to:

Add migrations and seed roles/admin user

Configure lazy/eager loading or logging

Add soft deletes or audit fields (created/updated info)


Happy to expand on any part!
For a .NET 8 Leave Management System using ASP.NET Core, Identity, and PostgreSQL with Entity Framework Core, here's a full list of NuGet packages you'll need to install.


---

1. Core ASP.NET & Identity

dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore
dotnet add package Microsoft.AspNetCore.Identity.UI

These provide identity models and scaffolding support.


---

2. Entity Framework Core with PostgreSQL

dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
dotnet add package Microsoft.EntityFrameworkCore.Tools
dotnet add package Microsoft.EntityFrameworkCore.Design

Npgsql.*: EF Core provider for PostgreSQL.

EFCore.Tools/Design: Needed for migrations and design-time operations.



---

3. Object Mapping (Optional but Recommended)

dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection

Use this for mapping between DTOs and models.


---

4. Fluent Validation (Optional for Request Validation)

dotnet add package FluentValidation.AspNetCore

Great for validating DTOs (e.g., leave requests).


---

5. Email/SMS Notifications (Optional)

SMTP (built-in)

SendGrid (for email):


dotnet add package SendGrid

Twilio (for SMS):


dotnet add package Twilio


---

6. API Support (Optional if building Web API)

dotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson

Useful for customizing JSON serialization in APIs.


---

Summary (Copy-Paste Script)

dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore
dotnet add package Microsoft.AspNetCore.Identity.UI
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
dotnet add package Microsoft.EntityFrameworkCore.Tools
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection
dotnet add package FluentValidation.AspNetCore
dotnet add package SendGrid
dotnet add package Twilio
dotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson


---

Let me know if you're building this as Web API, MVC, or Blazor, and I’ll tweak the package list and structure accordingly.

Nice — using Swagger is perfect for API testing and documentation!

For .NET 8, you can use Swashbuckle.AspNetCore to integrate Swagger into your project.


---

Swagger NuGet Package

dotnet add package Swashbuckle.AspNetCore


---

Setup for Swagger in .NET 8 (Minimal Hosting Model)

In Program.cs:

var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Enable Swagger in development
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseAuthorization();
app.MapControllers();

app.Run();


---

Optional: Swagger Enhancements

To include XML comments in your Swagger UI:

1. In .csproj, enable XML documentation:



<PropertyGroup>
  <GenerateDocumentationFile>true</GenerateDocumentationFile>
  <NoWarn>$(NoWarn);1591</NoWarn>
</PropertyGroup>

2. Add XML path in Swagger config:



builder.Services.AddSwaggerGen(c =>
{
    var xmlFilename = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    c.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, xmlFilename));
});


---

Let me know if you want:

JWT bearer token support in Swagger

Versioned APIs in Swagger UI

Custom branding for the Swagger page


I can walk you through those too.

